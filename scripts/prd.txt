Create a single service web app using Flask and Bokeh for portfolio optimization. For data loader, use the example in test.py. Use vnstock==3.2.2 and python version 3.10.11

Frontend
- HTML Templates (templates/):
  - index.html: Main page with user input form. This template is rendered by the Flask route /. When users visit the site, the Flask backend serves index.html, displaying the form for the risk-free rate and simulation count. When the form is submitted, the data is sent to the backend, which processes the input and redirects to the results page (/optimize route).
  - results.html: Results display with charts rendered after optimization is completed. This is a static html generated by bokeh html output
- Static Assets (static/):
  - css/style.css: Custom responsive styling.
  - js/script.js: Client-side form validation and UI enhancements.
  - 21st.dev for components.
- User Experience
- Testing
  - Test Suite (tests/test_app.py):
    - Unit tests for backend logic
    - Route and integration tests
    - Edge case and frontend validation tests
  - Fixtures: Sample data for isolated, repeatable tests

Backend logic:
- Create a Flask application structure with appropriate routes
- Implement data loading functionality using the specified URL
- Develop the portfolio optimization algorithm using Monte Carlo simulation
- Generate random portfolio weights for simulation (num_port = 5000)
- Calculate portfolio returns, risks, and Sharpe ratios
- Identify portfolios with maximum Sharpe ratio and minimum variance
- Generate visualizations

Core Features
- Use vnstock=3.2.2 to pull financial data via API(though in this case, use the provided GitHub URL)
- Allow user to select risk-free rate
- Configure number of simulations to run
- Allow user to select date range
